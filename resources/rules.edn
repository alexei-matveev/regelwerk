;; The reader is supposed to read  all objects from the file an return
;; a sequence.  Because we dont want  to wrap all rules  into an extra
;; list or array here.

;; Note that the rules are not  recursive by themseves. If you want to
;; get all integers modulo 4 you have to apply these rules sufficently
;; many times yourself. Also the original  facts are in general from a
;; "different  domain" so  that you  will  have to  pass them  through
;; yourself here or set/union in the code:
{:find [?n]
 :then [[(mod (inc ?n) 4) :is :int]
        [(mod (dec ?n) 4) :is :int]]
 :when [[?n :is :int]]}

;; Unconditional   rules   without   logic  variables   just   produce
;; facts. However these are "output domain" facts, not the same "input
;; domain" facts  as those in  ./facts.edn. FIXME: these are  ugly and
;; probably must die.
{:then
 [["text" :is :string]
  [nil :is nil]]}

;; The reader comment renders the next form practically non-existent:
#_(println "Hi!")

