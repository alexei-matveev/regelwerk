;; Do we really need to put all  arities in a single list? No we dont!
;; The reader is supposed to read  all objects from the file an return
;; a sequence.

;; Note that the rules are not  recursive by themseves. If you want to
;; get all integers you have to apply this rule sufficently many times
;; yourself. Also the original facts  are in general from a "different
;; domain" so that you will have to pass them through yourself here or
;; set/union in the code:
([?n]
 [[(mod (inc ?n) 4) :is :int]
  [(mod (dec ?n) 4) :is :int]]
 ;; when
 [[?n :is :int]])

;; Unconditional   rules   without   logic  variables   just   produce
;; facts. However these are "output domain" facts, not the same "input
;; domain" facts as those in ./facts.edn:
([["text" :is :string]
  [nil :is nil]])

;; A  (comment  ...)  form  is  read  literally  and must  be  treated
;; specially by the "rule compiler".  Not  sure if we should open this
;; box. Or  we could accept the  inevitable and dispatch on  the first
;; element like all Lisps do.
(comment "We could dispatch on the first element ...")
(comment second third)                  ; length 3, still a comment
(comment)                               ; length 1, still a comment

;; The reader comment renders the next form practically non-existant:
#_(comment "Hi!")

